version: "3.9"

x-app: &default-svc
  restart: always
  networks:
    - dev-net
x-log: &log-driver
  logging:
    driver: "json-file"
    options:
      tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

services:
  balance:
    image: ourrepo/balance:${BALANCE_VERSION:-0.1.0}
    hostname: balance
    container_name: balance
    build:
      context: balance
      dockerfile: ../${DOCKER_FILENAME:-Dockerfile-dev}
    profiles:
      - mongo
      - dev
      - balance
      - facade
      - full
    ports:
      - 5000:5000
    <<: [*default-svc, *log-driver]

    volumes:
      - ./balance:/app/

  facade:
    image: ourrepo/facade:${FACADE_VERSION:-0.1.0}
    hostname: facade
    container_name: facade
    build:
      context: facade
      dockerfile: ./${DOCKER_FILENAME:-Dockerfile-dev}
    profiles:
      - facade
      - dev
      - full
    volumes:
      - ./balance:/app/
    ports:
      - 3000:3001
    <<: [*default-svc, *log-driver]

  mongo:
    image: mongo:5.0.9
    hostname: mongo
    container_name: mongo

    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin-password
      SERVICE_PASSWORD: balance
      SERVICE_USER: balance
      SERVICE_DB: balance

    volumes:
      - db-data:/data/db
    configs:
      - source: mongo_config
        target: /docker-entrypoint-initdb.d/mongo-init.js

    profiles:
      - mongo
      - dev
      - balance
      - full
    ports:
      - 27017:27017
    healthcheck:
      test: echo "db.stats().ok" | mongo mongo:27017/test --quiet # mongo --eval 'db.getCollectionnames()'
      interval: 10s
      timeout: 2s
      retries: 10
    <<: [*default-svc, *log-driver]

  kafka1:
    image: confluentinc/cp-kafka:7.2.1
    hostname: kafka1
    container_name: kafka1
    profiles:
      - kafka
      - balance
      - full
    ports:
      - 29092:29092
    healthcheck:
      test: kafka-topics --bootstrap-server kafka1:9092 --list
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,CONNECTIONS_FROM_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONNECTIONS_FROM_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: kafka1
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093'
      KAFKA_LISTENERS: PLAINTEXT://kafka1:9092,CONTROLLER://kafka1:9093,CONNECTIONS_FROM_HOST://0.0.0.0:29092
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_SCHEMA_REGISTRY_URL: schema-registry:8081
      KAFKA_HEAP_OPTS: -Xmx2048M -Xms1024M
      KAFKA_RETENTION_BYTES: 10000000 # 10Mb
      KAFKA_LOG_RETENTION_HOURS: 5
      KAFKA_COMPRESSION_TYPE: zstd
    <<: [*default-svc, *log-driver]
    volumes:
      - kafka1-data:/var/lib/kafka/data
      - kafka1-logs:/var/lib/kafka/logs
    configs:
      - source: kafka_run
        target: /tmp/update_run.sh
        uid: "1000"
        gid: "1000"
        mode: 0777
    command: "bash -c 'if [ ! -f /tmp/update_run.sh ]; then echo \"ERROR: Did you forget the update_run.sh file that came with this docker-compose.yml file?\" && exit 1 ; else /tmp/update_run.sh && /etc/confluent/docker/run ; fi'"
    deploy:
      resources:
        limits:
          memory: 4096M

  schema-registry:
    image: confluentinc/cp-schema-registry:7.2.1
    hostname: schema-registry
    container_name: schema-registry
    profiles:
      - kafka
      - full
    ports:
      - 8081:8081
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry # https://docs.confluent.io/platform/current/schema-registry/installation/config.html#host-name
      # SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081" # Default
    healthcheck:
      test: curl --output /dev/null --silent --head --fail http://schema-registry:8081/subjects
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      kafka1:
        condition: service_healthy
    <<: [*default-svc, *log-driver]

  kafdrop:
    image: obsidiandynamics/kafdrop
    hostname: kafdrop
    container_name: kafdrop
    profiles:
      - kafka
      - full
    ports:
      - 9000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka1:9092
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_SERVLET_CONTEXTPATH: "/"
    command: -schemaregistry.connect=http://localhost:8081
    depends_on:
      kafka1:
        condition: service_healthy
    <<: [*default-svc, *log-driver]

  loki:
    image: grafana/loki:2.6.1
    hostname: loki
    container_name: loki
    profiles:
      - logs
      - dev
      - full
    command: -config.file=/etc/loki/loki-config.yaml
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'
    configs:
      - source: loki_config
        target: /etc/loki/loki-config.yaml
    <<: [*default-svc, *log-driver]

  promtail:
    image: grafana/promtail:2.6.1
    hostname: promtail
    container_name: promtail
    profiles:
      - logs
      - dev
      - full
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/promtail_config.yaml
    deploy:
      resources:
        limits:
          memory: 35M
          cpus: '0.2'
        reservations:
          memory: 25M
          cpus: '0.1'
    configs:
      - source: promtail_config
        target: /etc/promtail/promtail_config.yaml
    <<: [*default-svc, *log-driver]

  grafana:
    image: grafana/grafana:9.0.4
    hostname: grafana
    container_name: grafana
    profiles:
      - logs
      - dev
      - full
    ports: ["3001:3000"]
    volumes:
      - grafana:/var/lib/grafana
      - ./infra/dashboards:/etc/grafana/provisioning/dashboards:ro
    deploy:
      resources:
        limits:
          memory: 50M
          cpus: '0.5'
        reservations:
          memory: 30M
          cpus: '0.25'
    configs:
      - source: datasource
        target: /etc/grafana/provisioning/datasources/monitoring.yaml
    <<: [*default-svc, *log-driver]


configs:
  loki_config:
    file: ./infra/loki-config.yaml
  promtail_config:
    file: ./infra/promtail-config.yaml
  datasource:
    file: ./infra/datasource.yaml
  mongo_config:
    file: infra/mongodb/local-mongo-init.js
  kafka_run:
    file: ./infra/update_run.sh

volumes:
  grafana:
  db-data:
  kafka1-data:
  kafka1-logs:

networks:
  dev-net:
    name: dev-net
