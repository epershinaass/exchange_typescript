version: "3.8"

x-app: &default-svc
  restart: always
  networks:
    - dev-net
x-log: &log-driver
  logging:
    driver: "json-file"
    options:
      tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

services:
  mongo:
    image: mongo:5.0.9
    hostname: mongo
    container_name: mongo

    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      SERVICE_PASSWORD: balance
      SERVICE_USER: balance
      SERVICE_DB: balance

    volumes:
      - db-data:/data/db
    configs:
      - source: mongo_config
        target: /docker-entrypoint-initdb.d/mongo-init.sh

    profiles:
      - mongo
      - kafkamng
      - kafkafull
      - full
    ports:
      - 27017:27017
    healthcheck:
      test: echo "db.stats().ok" | mongo mongo:27017/test --quiet # mongo --eval 'db.getCollectionnames()'
      interval: 10s
      timeout: 2s
      retries: 10
    labels:
      org.label-schema.group: "monitoring"
    <<: [*default-svc, *log-driver]

  zoo1:
    image: confluentinc/cp-zookeeper:7.2.1
    hostname: zoo1
    container_name: zoo1
    profiles:
      - kafka
      - kafkamng
      - kafkafull
      - full
      - monitoring
    healthcheck:
      test: echo srvr | nc zoo1 2181 || exit 1
      retries: 20
      interval: 10s
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_HEAP_OPTS: -Xmx512M -Xms256M
    labels:
      org.label-schema.group: "monitoring"
    ports:
      - 2181:2181
    <<: [*default-svc, *log-driver]
    deploy:
      resources:
        limits:
          memory: 1024M


  kafka1:
    image: confluentinc/cp-kafka:7.2.1
    hostname: kafka1
    container_name: kafka1
    profiles:
      - kafka
      - kafkamng
      - kafkafull
      - full
      - monitoring
    depends_on:
      zoo1:
        condition: service_healthy
    ports:
      - 29092:29092
    healthcheck:
      test: kafka-topics --bootstrap-server kafka1:9092 --list
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      # KAFKA_BROKER_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_ZOOKEEPER_CONNECT: zoo1:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,CONNECTIONS_FROM_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONNECTIONS_FROM_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_SCHEMA_REGISTRY_URL: schema-registry:8081
      KAFKA_HEAP_OPTS: -Xmx2048M -Xms1024M
    <<: [*default-svc, *log-driver]
    labels:
      org.label-schema.group: "monitoring"
    deploy:
      resources:
        limits:
          memory: 4096M

  schema-registry:
    image: confluentinc/cp-schema-registry:7.2.1
    hostname: schema-registry
    container_name: schema-registry
    profiles:
      - kafkafull
      - full
    ports:
      - 8081:8081
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry # https://docs.confluent.io/platform/current/schema-registry/installation/config.html#host-name
      # SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081" # Default
    healthcheck:
      test: curl --output /dev/null --silent --head --fail http://schema-registry:8081/subjects
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      zoo1:
        condition: service_healthy
      kafka1:
        condition: service_healthy
    labels:
      org.label-schema.group: "monitoring"
    <<: [*default-svc, *log-driver]

  loki:
    image: grafana/loki:2.6.1
    hostname: loki
    container_name: loki
    profiles:
      - logs
      - full
    ports:
      - 3100:3100
    command: -config.file=/etc/loki/loki-config.yaml
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'
    configs:
      - source: loki_config
        target: /etc/loki/loki-config.yaml
    labels:
      org.label-schema.group: "monitoring"
    <<: [*default-svc, *log-driver]

  promtail:
    image: grafana/promtail:2.6.1
    hostname: promtail
    container_name: promtail
    profiles:
      - logs
      - full
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/promtail_config.yaml
    deploy:
      resources:
        limits:
          memory: 35M
          cpus: '0.2'
        reservations:
          memory: 25M
          cpus: '0.1'
    configs:
      - source: promtail_config
        target: /etc/promtail/promtail_config.yaml
    labels:
      org.label-schema.group: "monitoring"
    <<: [*default-svc, *log-driver]

  grafana:
    image: grafana/grafana:9.0.4
    hostname: grafana
    container_name: grafana
    profiles:
      - logs
      - full
      - monitoring
    ports: ["3000:3000"]
    volumes:
      - grafana:/var/lib/grafana
      - ./infra/dashboards:/etc/grafana/provisioning/dashboards:ro
    deploy:
      resources:
        limits:
          memory: 50M
          cpus: '0.5'
        reservations:
          memory: 30M
          cpus: '0.25'
    configs:
      - source: datasource
        target: /etc/grafana/provisioning/datasources/monitoring.yaml
    labels:
      org.label-schema.group: "monitoring"
    <<: [*default-svc, *log-driver]

  prometheus:
    image: prom/prometheus:v2.9.2
    hostname: prometheus
    container_name: prometheus
    profiles:
      - monitoring
      - full
    # ports: # No need to publish
    # - 9090:9090
    volumes:
      - prometheus_data:/prometheus
    configs:
      - source: prometheus
        target: /etc/prometheus/prometheus.yml
      - source: prometheus-alerts
        target: /etc/prometheus/alert.rules
    labels:
      org.label-schema.group: "monitoring"
    <<: [*default-svc, *log-driver]

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.44.0
    hostname: cadvisor
    container_name: cadvisor
    profiles:
      - monitoring
      - full
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    labels:
      org.label-schema.group: "monitoring"
    <<: [*default-svc, *log-driver]

  node-exporter:
    image: prom/node-exporter:v1.3.1
    hostname: node-exporter
    container_name: node-exporter
    profiles:
      - monitoring
      - full
    command:
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|run)($$|/)'
    # ports: # No need to publish
    #   - 9100:9100
    labels:
      org.label-schema.group: "monitoring"
    <<: [*default-svc, *log-driver]

  alertmanager:
    image: prom/alertmanager:v0.24.0
    hostname: alertmanager
    container_name: alertmanager
    profiles:
      - monitoring
      - full
    command:
      - '--config.file=/etc/alertmanager/config.yml'
    # ports: # No need to publish
    #   - 9093:9093
    configs:
      - source: alertmanager
        target: /etc/alertmanager/config.yml
    labels:
      org.label-schema.group: "monitoring"
    <<: [*default-svc, *log-driver]

  zookeeper-exporter:
    image: dabealu/zookeeper-exporter:v0.1.12
    hostname: zookeeper-exporter
    container_name: zookeeper-exporter
    profiles:
      - monitoring
      - full
    # ports: # No need to publish
    #   - 9141:9141
    command: --zk-hosts="zoo1:2181" --timeout=5
    depends_on:
      zoo1:
        condition: service_healthy
    labels:
      org.label-schema.group: "monitoring"
    <<: [*default-svc, *log-driver]

  kafka-exporter:
    image: danielqsj/kafka-exporter:v1.4.2
    hostname: kafka-exporter
    container_name: kafka-exporter
    command: --kafka.server=kafka1:9092
    profiles:
      - monitoring
      - full
    # ports: # No need to publish
    #   - 9308:9308
    depends_on:
      kafka1:
        condition: service_healthy
    labels:
      org.label-schema.group: "monitoring"
    <<: [*default-svc, *log-driver]


configs:
  loki_config:
    file: ./infra/loki-config.yaml
  promtail_config:
    file: ./infra/promtail-config.yaml
  datasource:
    file: ./infra/datasource.yaml
  prometheus:
    file: ./infra/prometheus.yml
  alertmanager:
    file: ./infra/alertmanager-config.yml
  prometheus-alerts:
    file: ./infra/alert.rules
  mongo_config:
    file: ./infra/mongodb/mongo-init.sh

volumes:
  grafana:
  db-data:
  prometheus_data:

networks:
  dev-net:
    name: dev-net
