version: "3.8"

x-app: &default-svc
    restart: always
    networks:
    - dev-net
x-log: &log-driver
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

services:
  facade:
    image: ourrepo/facade:0.1.0
    hostname: facade
    container_name: facade
    build:
      context: facade
      dockerfile: ./Dockerfile
    ports:
      - 4001:4001
    <<: [*default-svc, *log-driver]

  balance:
    image: ourrepo/balance:0.1.0
    hostname: balance
    container_name: balance
    build:
      context: balance
      dockerfile: ./Dockerfile
    ports:
      - 4002:4002
    <<: [*default-svc, *log-driver]

  mongo:
    image: mongo:latest
    hostname: mongo
    container_name: mongo
    ports:
      - 27017:27017
    healthcheck:
      test: echo "db.stats().ok" | mongo mongo:27017/test --quiet # mongo --eval 'db.getCollectionnames()'
      interval: 10s
      timeout: 2s
      retries: 10
    <<: [*default-svc, *log-driver]
    volumes:
    - db-data:/data/db

  zoo1:
    image: confluentinc/cp-zookeeper:7.2.0
    hostname: zoo1
    container_name: zoo1
    healthcheck:
      test: echo srvr | nc zoo1 2181 || exit 1
      retries: 20
      interval: 10s
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_HEAP_OPTS: -Xmx150M -Xms50M
    ports:
      - 2181:2181
    <<: [*default-svc, *log-driver]
    deploy:
      resources:
        limits:
          cpus: '0.30'
          memory: 200M


  kafka1:
    image: confluentinc/cp-kafka:7.2.0
    hostname: kafka1
    container_name: kafka1
    depends_on:
      zoo1:
        condition: service_healthy
    ports:
      - 29092:29092
    healthcheck:
      test: kafka-topics --bootstrap-server kafka1:9092 --list
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      # KAFKA_BROKER_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_ZOOKEEPER_CONNECT: zoo1:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,CONNECTIONS_FROM_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONNECTIONS_FROM_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_SCHEMA_REGISTRY_URL: schema-registry:8081
      KAFKA_HEAP_OPTS: -Xmx512M -Xms200M
    <<: [*default-svc, *log-driver]
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 600M

  schema-registry:
    image: confluentinc/cp-schema-registry:7.2.0
    hostname: schema-registry
    container_name: schema-registry
    ports:
      - 8081:8081
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry # https://docs.confluent.io/platform/current/schema-registry/installation/config.html#host-name
      # SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081" # Default
    healthcheck:
      test: curl --output /dev/null --silent --head --fail http://schema-registry:8081/subjects
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      zoo1:
        condition: service_healthy
      kafka1:
        condition: service_healthy
    <<: [*default-svc, *log-driver]

  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.2.0
    hostname: kafka-connect
    container_name: kafka-connect
    build:
      context: infra
      dockerfile: ./Dockerfile-MongoConnect
    ports:
      - 8083:8083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka1:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.protobuf.ProtobufConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.protobuf.ProtobufConverter
      CONNECT_INTERNAL_KEY_CONVERTER: io.confluent.connect.protobuf.ProtobufConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: io.confluent.connect.protobuf.ProtobufConverter
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_CONFLUENT_TOPIC_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR,com.mongodb.kafka=DEBUG"
      CONNECT_ZOOKEEPER_CONNECT: 'zoo1:2181'
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.2.0.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
    volumes:
      - jars:/usr/share/confluent-hub-components
    depends_on:
      zoo1:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    <<: [*default-svc, *log-driver]

  loki:
    image: grafana/loki:2.6.0
    hostname: loki
    container_name: loki
    ports:
      - 3100:3100
    command: -config.file=/etc/loki/loki-config.yaml
    deploy:
      resources:
        limits:
          memory: 100M
          cpus: '0.5'
        reservations:
          memory: 70M
          cpus: '0.1'
    configs:
    - source: loki_config
      target: /etc/loki/loki-config.yaml
    <<: [*default-svc, *log-driver]



  promtail:
    image: grafana/promtail:2.6.0
    hostname: promtail
    container_name: promtail
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/promtail_config.yaml
    deploy:
      resources:
        limits:
          memory: 35M
          cpus: '0.2'
        reservations:
          memory: 25M
          cpus: '0.1'
    configs:
    - source: promtail_config
      target: /etc/promtail/promtail_config.yaml
    <<: [*default-svc, *log-driver]

  prometheus:
    image: prom/prometheus:v2.37.0
    container_name: prometheus
    volumes:
      - ./infra/prometheus:/etc/prometheus
      - prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    ports:
      - 9090:9090
    labels:
      org.label-schema.group: "monitoring"


  alertmanager:
    image: prom/alertmanager:v0.24.0
    container_name: alertmanager
    volumes:
      - ./infra/alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    ports:
      - 9093:9093
    labels:
      org.label-schema.group: "monitoring"

  nodeexporter:
    image: prom/node-exporter:v1.3.1
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    ports:
      - 9100:9100
    labels:
      org.label-schema.group: "monitoring"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.44.0
    container_name: cadvisor
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      #- /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    restart: unless-stopped
    ports:
      - 8080:8080
    labels:
      org.label-schema.group: "monitoring"


  grafana:
    image: grafana/grafana:9.0.3
    container_name: grafana
    volumes:
      - grafana:/var/lib/grafana
      - ./infra/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./infra/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    ports:
      - 3000:3000
    labels:
      org.label-schema.group: "monitoring"

configs:
  loki_config:
    file: ./infra/loki-config.yaml
  promtail_config:
    file: ./infra/promtail-config.yaml
  datasource:
    file: ./infra/datasource.yaml
  prometheus_config:
    file: ./infra/prometheus/prometheus.yml

volumes:
  grafana:
  prometheus:
  db-data:
  jars:

networks:
  dev-net:
    name: dev-net
