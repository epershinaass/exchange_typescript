name: Deploy account

on:
  workflow_run:
    workflows:
      - "Build account image"
    types:
      - "completed"
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'

env:
  MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
  MONGO_INITDB_ROOT_USERNAME: "admin"
  MONGO_MONGODB_EXPORTER_PASSWORD: ${{ secrets.MONGO_MONGODB_EXPORTER_PASSWORD }}
  MONGO_SERVICE_PASSWORD: ${{ secrets.MONGO_SERVICE_PASSWORD }}
  ACCOUNT_SECRET_KEY: ${{ secrets.ACCOUNT_SECRET_KEY }}
  ACCOUNT_SALT: ${{ secrets.ACCOUNT_SALT }}
  FIRST_USER_PASSWORD: ${{ secrets.FIRST_USER_PASSWORD }}
  JFROG_USERNAME_DEPLOY_ACCESS_TOKEN: ${{ secrets.JFROG_USERNAME_DEPLOY_ACCESS_TOKEN }}
  JFROG_USERNAME_DEPLOY_USERNAME: ${{ secrets.JFROG_USERNAME_DEPLOY_USERNAME }}
  JFROG_URL: exchangetypescript.jfrog.io

  PROJECT_DIR: "exchange_typescript"
  GIT_URL: "https://github.com/epershinaass/exchange_typescript"

  ACCOUNT_DB_URL: "mongo-account"
  SERVICE_DB_PORT: 27017
  ACCOUNT_DB_USER: "account"
  SERVICE_URL: "0.0.0.0"
  ACCOUNT_SERVICE_PORT: 5002

jobs:
  deploy:
    name: Deploy
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER1 }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: MONGO_INITDB_ROOT_PASSWORD,MONGO_MONGODB_EXPORTER_PASSWORD,MONGO_SERVICE_PASSWORD,PROJECT_DIR,GIT_URL,JFROG_USERNAME_DEPLOY_ACCESS_TOKEN,JFROG_USERNAME_DEPLOY_USERNAME,ACCOUNT_DB_URL,SERVICE_DB_PORT,ACCOUNT_DB_USER,SERVICE_URL,ACCOUNT_SERVICE_PORT,MONGO_INITDB_ROOT_USERNAME,ACCOUNT_SECRET_KEY,ACCOUNT_SALT,FIRST_USER_PASSWORD
          script: |
            if [ -d $PROJECT_DIR ]; then
              cd $PROJECT_DIR && git pull
            else
              git clone $GIT_URL && cd $PROJECT_DIR
            fi

            echo "MONGO_INITDB_ROOT_PASSWORD=$MONGO_INITDB_ROOT_PASSWORD
            MONGO_INITDB_ROOT_USERNAME=$MONGO_INITDB_ROOT_USERNAME
            MONGODB_EXPORTER_PASSWORD=$MONGO_MONGODB_EXPORTER_PASSWORD
            SERVICE_PASSWORD=$MONGO_SERVICE_PASSWORD
            JFROG_USERNAME_DEPLOY_ACCESS_TOKEN=$JFROG_USERNAME_DEPLOY_ACCESS_TOKEN
            JFROG_USERNAME_DEPLOY_USERNAME=$JFROG_USERNAME_DEPLOY_USERNAME
            JFROG_URL=$JFROG_URL
            FIRST_USER_PASSWORD=$FIRST_USER_PASSWORD
            COMPOSE_HTTP_TIMEOUT=500
            SERVICE_DB_URL=$ACCOUNT_DB_URL
            SERVICE_USER=$ACCOUNT_DB_USER
            SERVICE_DB=$ACCOUNT_DB_USER
            ACCOUNT_SERVICE_PORT=$ACCOUNT_SERVICE_PORT" > acc.env


            echo "ACC_URL=$SERVICE_URL
            ACC_PORT=$ACCOUNT_SERVICE_PORT
            ACC_DB_URL=$ACCOUNT_DB_URL
            ACC_DB_PORT=$SERVICE_DB_PORT
            ACC_DB_NAME=$ACCOUNT_DB_USER
            ACC_DB_USER=$ACCOUNT_DB_USER
            ACC_DB_PASSWORD=$MONGO_SERVICE_PASSWORD
            ACC_SECRET_KEY=$ACCOUNT_SECRET_KEY
            ACC_PASSW_SALT=$ACCOUNT_SALT
            " > ./account/.env

            export $(cat acc.env | egrep -v "(^#.*|^$)" | xargs)
            envsubst<infra/mongodb/mongosetup.sh>temp && cat temp > infra/mongodb/mongosetup.sh
            docker login -u $JFROG_USERNAME_DEPLOY_USERNAME -p $JFROG_USERNAME_DEPLOY_ACCESS_TOKEN $JFROG_URL
            docker-compose --profile account -f ./infra/docker-compose-app.yaml --env-file acc.env up -d
            rm acc.env
            rm ./account/.env
            git restore .
            git clean -dxf
            docker logout
