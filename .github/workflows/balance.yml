name: Balance
on:
  pull_request:
    types: [opened, reopened, synchronize]
    paths:
    - "balance/**"
    branches: ["main"]
  push:
    paths:
    - "balance/**"
    branches:
    - "main"
  workflow_dispatch:

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'

jobs:
  build-images:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      docker-tag: ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
    env:
      IMAGE_REGISTRY: ${{ secrets.REGISTRY }} # exchangetypescript.jfrog.io
      IMAGE_REPOSITORY: balance-docker
      DOCKER_IMAGE: balance
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Docker Buildx 🐋
      uses: docker/setup-buildx-action@v2

    - name: Login to JFrog 🐸
      uses: docker/login-action@v1
      with:
        registry: ${{ env.IMAGE_REGISTRY }}
        username: ${{ secrets.JFROG_USERNAME_BUILD_USERNAME }}
        password: ${{ secrets.JFROG_USERNAME_BUILD_ACCESS_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}/${{ env.DOCKER_IMAGE }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        tags: |
          type=edge
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Upload Dockerfile as artifact
      uses: actions/upload-artifact@v3
      with:
        name: dockerfile-artifact
        path: Dockerfile
        retention-days: 1

    - name: Download artifact from previous workflow
      uses: actions/download-artifact@v3
      with:
        name: dockerfile-artifact
        path: /tmp

    - name: Changee kafka url
      env:
        KAFKA_URL: "'kafka1:9092','kafka2:9092','kafka3:9092'"
      run: |
        sed -i -E -e "s/brokers: \[.*\],$/brokers: \[$KAFKA_URL\],/" ./balance/src/config/kafka.config.ts

    - name: Build and push
      uses: docker/build-push-action@v3
      id: buildx
      with:
        context: ./balance
        file: /tmp/Dockerfile
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        cache-from: type=registry,ref=${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}/${{ env.DOCKER_IMAGE }}:buildcache
        cache-to: type=registry,ref=${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}/${{ env.DOCKER_IMAGE }}:buildcache,mode=max
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
      name: Deploy
      timeout-minutes: 10
      runs-on: ubuntu-latest
      needs: build-images
      env:
        MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
        MONGO_INITDB_ROOT_USERNAME: "admin"
        MONGO_MONGODB_EXPORTER_PASSWORD: ${{ secrets.MONGO_MONGODB_EXPORTER_PASSWORD }}
        MONGO_SERVICE_PASSWORD: ${{ secrets.MONGO_SERVICE_PASSWORD }}
        JFROG_USERNAME_DEPLOY_ACCESS_TOKEN: ${{ secrets.JFROG_USERNAME_DEPLOY_ACCESS_TOKEN }}
        JFROG_USERNAME_DEPLOY_USERNAME: ${{ secrets.JFROG_USERNAME_DEPLOY_USERNAME }}
        JFROG_URL: ${{ secrets.REGISTRY }} # exchangetypescript.jfrog.io

        PROJECT_DIR: "exchange_typescript"
        GIT_URL: "https://github.com/epershinaass/exchange_typescript"
        KAFKA_URL: "'kafka1:9092','kafka2:9092','kafka3:9092'"

        BALANCE_DB_URL: "mongo-balance"
        SERVICE_DB_PORT: 27017
        BALANCE_DB_USER: "balance"
        SERVICE_URL: "0.0.0.0"
        BALANCE_SERVICE_PORT: 5000
        PRODUCTS_SERVICE_PORT: 5001
        FACADE_SERVICE_PORT: 3000
        ACCOUNT_SERVICE_PORT: 5002
        ORDER_SERVICE_PORT: 5003
        BALANCE_TAG: ${{needs.build-images.outputs.docker-tag}}
      steps:
        - name: executing remote ssh commands using ssh key
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.SERVER1 }}
            username: ${{ secrets.SSH_USERNAME }}
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            envs: MONGO_INITDB_ROOT_PASSWORD,MONGO_MONGODB_EXPORTER_PASSWORD,MONGO_SERVICE_PASSWORD,PROJECT_DIR,GIT_URL,JFROG_USERNAME_DEPLOY_ACCESS_TOKEN,JFROG_USERNAME_DEPLOY_USERNAME,BALANCE_DB_URL,SERVICE_DB_PORT,BALANCE_DB_USER,SERVICE_URL,BALANCE_SERVICE_PORT,MONGO_INITDB_ROOT_USERNAME,FACADE_SERVICE_PORT,ACCOUNT_SERVICE_PORT,PRODUCTS_SERVICE_PORT,JFROG_URL,BALANCE_TAG,KAFKA_URL,ORDER_SERVICE_PORT
            script: |
              if [ -d $PROJECT_DIR ]; then
                cd $PROJECT_DIR && git pull
              else
                git clone $GIT_URL && cd $PROJECT_DIR
              fi

              echo $BALANCE_TAG
              echo "MONGO_INITDB_ROOT_PASSWORD=$MONGO_INITDB_ROOT_PASSWORD
              MONGO_INITDB_ROOT_USERNAME=$MONGO_INITDB_ROOT_USERNAME
              MONGODB_EXPORTER_PASSWORD=$MONGO_MONGODB_EXPORTER_PASSWORD
              MONGO_MONGODB_EXPORTER_PASSWORD=$MONGO_MONGODB_EXPORTER_PASSWORD
              SERVICE_PASSWORD=$MONGO_SERVICE_PASSWORD
              JFROG_USERNAME_DEPLOY_ACCESS_TOKEN=$JFROG_USERNAME_DEPLOY_ACCESS_TOKEN
              JFROG_USERNAME_DEPLOY_USERNAME=$JFROG_USERNAME_DEPLOY_USERNAME
              JFROG_URL=$JFROG_URL
              COMPOSE_HTTP_TIMEOUT=500
              SERVICE_DB_URL=$BALANCE_DB_URL
              SERVICE_USER=$BALANCE_DB_USER
              SERVICE_DB=$BALANCE_DB_USER
              FACADE_SERVICE_PORT=$FACADE_SERVICE_PORT
              ACCOUNT_SERVICE_PORT=$ACCOUNT_SERVICE_PORT
              PRODUCTS_SERVICE_PORT=$PRODUCTS_SERVICE_PORT
              BALANCE_SERVICE_PORT=$BALANCE_SERVICE_PORT
              BALANCE_TAG=$BALANCE_TAG
              ORDER_SERVICE_PORT=$ORDER_SERVICE_PORT
              KAFKA_URL=$KAFKA_URL" > bl.env


              echo "DB_URL=$BALANCE_DB_URL
              DB_PASSWORD=$MONGO_SERVICE_PASSWORD
              DB_PORT=$SERVICE_DB_PORT
              DB_USER=$BALANCE_DB_USER
              DB_NAME=$BALANCE_DB_USER
              SERVICE_URL=$SERVICE_URL
              SERVICE_PORT=$BALANCE_SERVICE_PORT
              KAFKA_URL=$KAFKA_URL" > ./balance/.env

              export $(cat bl.env | egrep -v "(^#.*|^$)" | xargs)
              docker login -u $JFROG_USERNAME_DEPLOY_USERNAME -p $JFROG_USERNAME_DEPLOY_ACCESS_TOKEN $JFROG_URL
              docker ps -a --format "{{.Names}}" | grep $BALANCE_DB_URL
              status=$?
              if [ $status != 0 ]; then
                echo "mongo not running"
                envsubst<infra/mongodb/mongosetup.sh>temp && cat temp > infra/mongodb/mongosetup.sh
                docker-compose --profile balance -f ./infra/docker-compose-app.yaml --env-file bl.env up -d
                rm temp
              fi
              docker-compose --profile balance-app -f ./infra/docker-compose-app.yaml --env-file bl.env up -d --force-recreate
              rm bl.env
              git restore .
              docker logout
