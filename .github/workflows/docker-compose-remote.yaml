name: Deploy to server1

on:
  pull_request:
    types: [closed]
    paths:
    - 'infra/grafana/**'
    - 'infra/haproxy/**'
    - 'infra/kafka/**'
    - 'infra/loki/**'
    - 'infra/prometheus/**'
    - 'infra/promtail/**'
    - 'infra/docker-compose.yaml'
  workflow_dispatch:


env:
  MONGO_MONGODB_EXPORTER_PASSWORD: ${{ secrets.MONGO_MONGODB_EXPORTER_PASSWORD }}
  GRAFANA_DOMAIN: ${{ secrets.SERVER1 }}
  GRAFANA_DEFAULT_ADMIN_PASSWORD: ${{ secrets.GRAFANA_DEFAULT_ADMIN_PASSWORD }}
  GRAFANA_DATASOURCE_USER: grafana
  GRAFANA_DATASOURCE_PASSWORD: ${{ secrets.GRAFANA_DATASOURCE_PASSWORD }}
  PROMETHEUS_DOMAIN: ${{ secrets.SERVER1 }}
  ALERTMANAGER_TELEGRAM_BOT_TOKEN: ${{ secrets.ALERTMANAGER_TELEGRAM_BOT_TOKEN }}
  ALERTMANAGER_TELEGRAM_CHAT_ID: ${{ secrets.ALERTMANAGER_TELEGRAM_CHAT_ID }}
  LOKI_S3_USER: ${{ secrets.LOKI_S3_USER }}
  LOKI_S3_PASSWORD: ${{ secrets.LOKI_S3_PASSWORD }}
  MINIO_ROOT_USER: ${{ secrets.MINIO_ROOT_USER }}
  MINIO_ROOT_PASSWORD: ${{ secrets.MINIO_ROOT_PASSWORD }}

  PROJECT_DIR: "exchange_typescript"
  GIT_URL: "https://github.com/epershinaass/exchange_typescript"

jobs:
  deploy:
    name: Deploy
    if: github.event.pull_request.merged == true
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          list-files: 'none'
          filters: |
            grafana:
              - 'infra/grafana/**'
            haproxy:
              - 'infra/haproxy/**'
            kafka:
              - 'infra/kafka/**'
            loki:
              - 'infra/loki/**'
            prometheus:
              - 'infra/prometheus/**'
            promtail:
              - 'infra/promtail/**'
            infra:
              - 'infra/docker-compose.yaml'

      - name: deploy grafana profile
        uses: appleboy/ssh-action@master
        if: steps.changes.outputs.grafana == 'true'
        with:
          host: ${{ secrets.SERVER1 }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: GRAFANA_DOMAIN,GRAFANA_DEFAULT_ADMIN_PASSWORD,GRAFANA_DATASOURCE_USER,GRAFANA_DATASOURCE_PASSWORD,PROJECT_DIR,GIT_URL
          script: |
            if [ -d $PROJECT_DIR ]; then
              cd $PROJECT_DIR && git pull
            else
              git clone $GIT_URL && cd $PROJECT_DIR
            fi

            echo "GRAFANA_DOMAIN=$GRAFANA_DOMAIN
            GRAFANA_DATASOURCE_USER=$GRAFANA_DATASOURCE_USER
            GRAFANA_DATASOURCE_PASSWORD=$GRAFANA_DATASOURCE_PASSWORD
            GRAFANA_DEFAULT_ADMIN_PASSWORD=$GRAFANA_DEFAULT_ADMIN_PASSWORD
            COMPOSE_HTTP_TIMEOUT=500" > .env

            export $(cat .env | egrep -v "(^#.*|^$)" | xargs)
            envsubst<infra/grafana/datasource-auth.yaml>temp && cat temp > infra/grafana/datasource-auth.yaml
            docker-compose --profile grafana -f ./infra/docker-compose.yaml --env-file .env up -d --force-recreate
            rm .env
            git restore .
            git clean -dxf

      - name: deploy haproxy profile
        uses: appleboy/ssh-action@master
        if: steps.changes.outputs.haproxy == 'true'
        with:
          host: ${{ secrets.SERVER1 }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            if [ -d $PROJECT_DIR ]; then
              cd $PROJECT_DIR && git pull
            else
              git clone $GIT_URL && cd $PROJECT_DIR
            fi

            echo "COMPOSE_HTTP_TIMEOUT=500" > .env
            export $(cat .env | egrep -v "(^#.*|^$)" | xargs)
            docker-compose --profile haproxy -f ./infra/docker-compose.yaml --env-file .env up -d --force-recreate
            rm .env

      - name: deploy kafka profile
        uses: appleboy/ssh-action@master
        if: steps.changes.outputs.kafka == 'true'
        with:
          host: ${{ secrets.SERVER1 }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            if [ -d $PROJECT_DIR ]; then
              cd $PROJECT_DIR && git pull
            else
              git clone $GIT_URL && cd $PROJECT_DIR
            fi

            echo "COMPOSE_HTTP_TIMEOUT=500" > .env

            export $(cat .env | egrep -v "(^#.*|^$)" | xargs)
            wget -P ./infra/kafka https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.17.0/jmx_prometheus_javaagent-0.17.0.jar
            docker-compose --profile kafka -f ./infra/docker-compose.yaml --env-file .env up -d
            rm .env
            git restore .
            git clean -dxf

      - name: deploy loki profile
        uses: appleboy/ssh-action@master
        if: steps.changes.outputs.loki == 'true'
        with:
          host: ${{ secrets.SERVER1 }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: LOKI_S3_USER,LOKI_S3_PASSWORD
          script: |
            if [ -d $PROJECT_DIR ]; then
              cd $PROJECT_DIR && git pull
            else
              git clone $GIT_URL && cd $PROJECT_DIR
            fi

            echo "COMPOSE_HTTP_TIMEOUT=500
            LOKI_S3_USER=$LOKI_S3_USER
            LOKI_S3_PASSWORD=$LOKI_S3_PASSWORD" > .env

            export $(cat .env | egrep -v "(^#.*|^$)" | xargs)
            envsubst<infra/loki/loki-config-scalable.yaml>temp && cat temp > infra/loki/loki-config-scalable.yaml
            docker-compose --profile loki -f ./infra/docker-compose.yaml --env-file .env up -d
            rm .env
            git restore .
            git clean -dxf

      - name: deploy prometheus profile
        uses: appleboy/ssh-action@master
        if: steps.changes.outputs.prometheus == 'true'
        with:
          host: ${{ secrets.SERVER1 }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: GRAFANA_DATASOURCE_PASSWORD,PROMETHEUS_DOMAIN,ALERTMANAGER_TELEGRAM_BOT_TOKEN,ALERTMANAGER_TELEGRAM_CHAT_ID,PROJECT_DIR,GIT_URL
          script: |
            if [ -d $PROJECT_DIR ]; then
              cd $PROJECT_DIR && git pull
            else
              git clone $GIT_URL && cd $PROJECT_DIR
            fi

            echo "GRAFANA_DATASOURCE_PASSWORD=$GRAFANA_DATASOURCE_PASSWORD
            PROMETHEUS_DATASOURCE_PASSWORD=$GRAFANA_DATASOURCE_PASSWORD
            PROMETHEUS_DOMAIN=$PROMETHEUS_DOMAIN
            ALERTMANAGER_TELEGRAM_BOT_TOKEN=$ALERTMANAGER_TELEGRAM_BOT_TOKEN
            TELEGRAM_BOT_TOKEN=$ALERTMANAGER_TELEGRAM_BOT_TOKEN
            TELEGRAM_CHAT_ID=$ALERTMANAGER_TELEGRAM_CHAT_ID
            COMPOSE_HTTP_TIMEOUT=500
            MONGO_MONGODB_EXPORTER_PASSWORD=$MONGO_MONGODB_EXPORTER_PASSWORD
            ALERTMANAGER_TELEGRAM_CHAT_ID=$ALERTMANAGER_TELEGRAM_CHAT_ID" > .env

            export $(cat .env | egrep -v "(^#.*|^$)" | xargs)
            envsubst<infra/prometheus/alertmanager-config.yml>temp && cat temp > infra/prometheus/alertmanager-config.yml
            envsubst<infra/prometheus/prometheus.yml>temp && cat temp > infra/prometheus/prometheus.yml
            docker-compose --profile prometheus --profile monitoring -f ./infra/docker-compose.yaml --env-file .env up -d
            rm .env
            git restore .
            git clean -dxf


      - name: deploy promtail profile
        uses: appleboy/ssh-action@master
        if: steps.changes.outputs.promtail == 'true'
        with:
          host: ${{ secrets.SERVER1 }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            if [ -d $PROJECT_DIR ]; then
              cd $PROJECT_DIR && git pull
            else
              git clone $GIT_URL && cd $PROJECT_DIR
            fi

            echo "COMPOSE_HTTP_TIMEOUT=500" > .env

            export $(cat .env | egrep -v "(^#.*|^$)" | xargs)
            docker-compose --promtail full -f ./infra/docker-compose.yaml --env-file .env up -d --force-recreate
            rm .env
            git restore .
            git clean -dxf

      - name: deploy infra
        uses: appleboy/ssh-action@master
        if: steps.changes.outputs.infra == 'true'
        with:
          host: ${{ secrets.SERVER1 }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: MONGO_MONGODB_EXPORTER_PASSWORD,GRAFANA_DOMAIN,GRAFANA_DEFAULT_ADMIN_PASSWORD,GRAFANA_DATASOURCE_USER,GRAFANA_DATASOURCE_PASSWORD,PROMETHEUS_DOMAIN,ALERTMANAGER_TELEGRAM_BOT_TOKEN,ALERTMANAGER_TELEGRAM_CHAT_ID,PROJECT_DIR,GIT_URL,LOKI_S3_USER,LOKI_S3_PASSWORD,MINIO_ROOT_USER,MINIO_ROOT_PASSWORD
          script: |
            if [ -d $PROJECT_DIR ]; then
              cd $PROJECT_DIR && git pull
            else
              git clone $GIT_URL && cd $PROJECT_DIR
            fi

            echo "MONGO_MONGODB_EXPORTER_PASSWORD=$MONGO_MONGODB_EXPORTER_PASSWORD
            GRAFANA_DOMAIN=$GRAFANA_DOMAIN
            GRAFANA_DATASOURCE_USER=$GRAFANA_DATASOURCE_USER
            GRAFANA_DATASOURCE_PASSWORD=$GRAFANA_DATASOURCE_PASSWORD
            PROMETHEUS_DATASOURCE_PASSWORD=$GRAFANA_DATASOURCE_PASSWORD
            GRAFANA_DEFAULT_ADMIN_PASSWORD=$GRAFANA_DEFAULT_ADMIN_PASSWORD
            PROMETHEUS_DOMAIN=$PROMETHEUS_DOMAIN
            ALERTMANAGER_TELEGRAM_BOT_TOKEN=$ALERTMANAGER_TELEGRAM_BOT_TOKEN
            TELEGRAM_BOT_TOKEN=$ALERTMANAGER_TELEGRAM_BOT_TOKEN
            TELEGRAM_CHAT_ID=$ALERTMANAGER_TELEGRAM_CHAT_ID
            ALERTMANAGER_TELEGRAM_CHAT_ID=$ALERTMANAGER_TELEGRAM_CHAT_ID
            COMPOSE_HTTP_TIMEOUT=500
            LOKI_S3_USER=$LOKI_S3_USER
            LOKI_S3_PASSWORD=$LOKI_S3_PASSWORD
            MINIO_ROOT_USER=$MINIO_ROOT_USER
            MINIO_ROOT_PASSWORD=$MINIO_ROOT_PASSWORD" > .env

            export $(cat .env | egrep -v "(^#.*|^$)" | xargs)
            envsubst<infra/prometheus/alertmanager-config.yml>temp && cat temp > infra/prometheus/alertmanager-config.yml
            envsubst<infra/grafana/datasource-auth.yaml>temp && cat temp > infra/grafana/datasource-auth.yaml
            envsubst<infra/prometheus/prometheus.yml>temp && cat temp > infra/prometheus/prometheus.yml
            envsubst<infra/loki/loki-config-scalable.yaml>temp && cat temp > infra/loki/loki-config-scalable.yaml
            wget -P ./infra/kafka https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.17.0/jmx_prometheus_javaagent-0.17.0.jar
            docker-compose --profile infra -f ./infra/docker-compose.yaml --env-file .env up -d
            rm .env
            git restore .
            git clean -dxf