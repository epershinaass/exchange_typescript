version: "3.9"

x-app: &default-svc
  restart: always
  networks:
    - stage-net
x-log: &log-driver
  logging:
    options:
      tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
x-labels: &default-lables
  labels:
    org.label-schema.group: "monitoring"

services:

  kafka1:
    image: confluentinc/cp-kafka:7.2.1
    hostname: kafka1
    container_name: kafka1
    profiles:
      - kafka
      - infra
      - full
    healthcheck:
      test: kafka-topics --bootstrap-server kafka1:9092 --list
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_NODE_ID: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka1:9092,CONTROLLER://kafka1:9093
      CLUSTER_ID: YjFmNDMxMzk4NmEyNDEyMj
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_LOG_CLEANUP_POLICY: delete #,compact
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_SCHEMA_REGISTRY_URL: schema-registry:8081
      KAFKA_COMPRESSION_TYPE: gzip
      EXTRA_ARGS: '-javaagent:/usr/share/jmx-exporter/jmx_prometheus_javaagent-0.17.0.jar=9101:/etc/jmx-exporter/config.yml'
    <<: [*default-svc, *log-driver, *default-lables]
    configs:
      - source: kafka_run
        target: /tmp/update_run.sh
        uid: "1000"
        gid: "1000"
        mode: 0777
      - source: kafka_exporter_config
        target: /etc/jmx-exporter/config.yml
      - source: kafka_exporter_jar
        target: /usr/share/jmx-exporter/jmx_prometheus_javaagent-0.17.0.jar
    command: "bash -c 'if [ ! -f /tmp/update_run.sh ]; then echo \"ERROR: Did you forget the update_run.sh file that came with this docker-compose.yml file?\" && exit 1 ; else /tmp/update_run.sh && /etc/confluent/docker/run ; fi'"
    volumes:
      - kafka1-data:/var/lib/kafka/data
    # deploy: # Change after testing
    #   resources:
    #     limits:
    #       memory: 4096M

  kafka2:
    image: confluentinc/cp-kafka:7.2.1
    hostname: kafka2
    container_name: kafka2
    profiles:
      - kafka
      - infra
      - full
    healthcheck:
      test: kafka-topics --bootstrap-server kafka2:9092 --list
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_NODE_ID: 2
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka2:9092,CONTROLLER://kafka2:9093
      CLUSTER_ID: YjFmNDMxMzk4NmEyNDEyMj
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_LOG_CLEANUP_POLICY: delete #,compact
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_SCHEMA_REGISTRY_URL: schema-registry:8081
      KAFKA_COMPRESSION_TYPE: gzip
      EXTRA_ARGS: '-javaagent:/usr/share/jmx-exporter/jmx_prometheus_javaagent-0.17.0.jar=9101:/etc/jmx-exporter/config.yml'
    <<: [*default-svc, *log-driver, *default-lables]
    configs:
      - source: kafka_run
        target: /tmp/update_run.sh
        uid: "1000"
        gid: "1000"
        mode: 0777
      - source: kafka_exporter_config
        target: /etc/jmx-exporter/config.yml
      - source: kafka_exporter_jar
        target: /usr/share/jmx-exporter/jmx_prometheus_javaagent-0.17.0.jar
    command: "bash -c 'if [ ! -f /tmp/update_run.sh ]; then echo \"ERROR: Did you forget the update_run.sh file that came with this docker-compose.yml file?\" && exit 1 ; else /tmp/update_run.sh && /etc/confluent/docker/run ; fi'"
    volumes:
      - kafka2-data:/var/lib/kafka/data
    # deploy: # Change after testing
    #   resources:
    #     limits:
    #       memory: 4096M

  kafka3:
    image: confluentinc/cp-kafka:7.2.1
    hostname: kafka3
    container_name: kafka3
    profiles:
      - kafka
      - infra
      - full
    healthcheck:
      test: kafka-topics --bootstrap-server kafka3:9092 --list
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_NODE_ID: 3
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka3:9092,CONTROLLER://kafka3:9093
      CLUSTER_ID: YjFmNDMxMzk4NmEyNDEyMj
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_LOG_CLEANUP_POLICY: delete #,compact
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_SCHEMA_REGISTRY_URL: schema-registry:8081
      KAFKA_COMPRESSION_TYPE: gzip
      EXTRA_ARGS: '-javaagent:/usr/share/jmx-exporter/jmx_prometheus_javaagent-0.17.0.jar=9101:/etc/jmx-exporter/config.yml'
    <<: [*default-svc, *log-driver, *default-lables]
    configs:
      - source: kafka_run
        target: /tmp/update_run.sh
        uid: "1000"
        gid: "1000"
        mode: 0777
      - source: kafka_exporter_config
        target: /etc/jmx-exporter/config.yml
      - source: kafka_exporter_jar
        target: /usr/share/jmx-exporter/jmx_prometheus_javaagent-0.17.0.jar
    command: "bash -c 'if [ ! -f /tmp/update_run.sh ]; then echo \"ERROR: Did you forget the update_run.sh file that came with this docker-compose.yml file?\" && exit 1 ; else /tmp/update_run.sh && /etc/confluent/docker/run ; fi'"
    volumes:
      - kafka3-data:/var/lib/kafka/data
    # deploy: # Change after testing
    #   resources:
    #     limits:
    #       memory: 4096M

  schema-registry:
    image: confluentinc/cp-schema-registry:7.2.1
    hostname: schema-registry
    container_name: schema-registry
    profiles:
      - kafka
      - infra
      - full
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:9092,PLAINTEXT://kafka3:9092,PLAINTEXT://kafka3:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry # https://docs.confluent.io/platform/current/schema-registry/installation/config.html#host-name
      # SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081" # Default
      EXTRA_ARGS: '-javaagent:/usr/share/jmx-exporter/jmx_prometheus_javaagent-0.17.0.jar=9101:/etc/jmx-exporter/config.yml'
    configs:
      - source: schema_registry_exporter_config
        target: /etc/jmx-exporter/config.yml
      - source: kafka_exporter_jar
        target: /usr/share/jmx-exporter/jmx_prometheus_javaagent-0.17.0.jar
    healthcheck:
      test: curl --output /dev/null --silent --head --fail http://schema-registry:8081/subjects
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    <<: [*default-svc, *log-driver, *default-lables]

  kowl:
    image: quay.io/cloudhut/kowl:master
    hostname: kowl
    container_name: kowl
    profiles:
      - kowl
      - kafka
      - infra
      - full
    environment:
      KAFKA_BROKERS: kafka1:9092,kafka2:9092,kafka3:9092
      KAFKA_SCHEMAREGISTRY_ENABLED: true
      KAFKA_SCHEMAREGISTRY_URLS: http://schema-registry:8081
      SERVER_BASEPATH: /kafka
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    <<: [*default-svc, *log-driver, *default-lables]

  loki-frontend:
    image: grafana/loki:2.6.1
    profiles:
      - loki
      - full
      - infra
    command: -config.file=/etc/loki/loki-config.yaml -target=query-frontend -frontend.downstream-url=http://loki-read:3100
    deploy:
      mode: replicated
      replicas: 2
    configs:
      - source: loki_config
        target: /etc/loki/loki-config.yaml
    depends_on:
      - haproxy
    <<: [*default-svc, *log-driver, *default-lables]

  loki-read:
    image: grafana/loki:2.6.1
    profiles:
      - loki
      - full
      - infra
    command: -config.file=/etc/loki/loki-config.yaml -target=read
    environment:
      LOKI_S3_USER: ${LOKI_S3_USER}
      LOKI_S3_PASSWORD: ${LOKI_S3_PASSWORD}
    deploy:
      mode: replicated
      replicas: 3
    configs:
      - source: loki_config
        target: /etc/loki/loki-config.yaml
      - source: loki_alert
        target: /etc/loki/rules/rules.yml
    depends_on:
      - haproxy
    <<: [*default-svc, *log-driver, *default-lables]

  loki-write:
    image: grafana/loki:2.6.1
    profiles:
      - loki
      - full
      - infra
    command: -config.file=/etc/loki/loki-config.yaml -target=write
    environment:
      LOKI_S3_USER: ${LOKI_S3_USER}
      LOKI_S3_PASSWORD: ${LOKI_S3_PASSWORD}
    deploy:
      mode: replicated
      replicas: 3
    # deploy: # Change after testing
    #   resources:
    #     limits:
    #       memory: 256M
    #       cpus: '0.5'
    #     reservations:
    #       memory: 128M
    #       cpus: '0.1'
    configs:
      - source: loki_config
        target: /etc/loki/loki-config.yaml
    depends_on:
      - haproxy
    <<: [*default-svc, *log-driver, *default-lables]

  minio:
    image: quay.io/minio/minio:RELEASE.2022-07-30T05-21-40Z
    hostname: minio
    container_name: minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler &&
        minio server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BROWSER_REDIRECT_URL: http://${GRAFANA_DOMAIN:-127.0.0.1}:8080/minio
      MINIO_PROMETHEUS_AUTH_TYPE: public
      MINIO_UPDATE: off
    profiles:
      - minio
      - full
      - infra
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    expose:
      - 9000
      - 9001
    depends_on:
      - haproxy
    volumes:
      - minio:/data
    <<: [*default-svc, *log-driver, *default-lables]

  promtail:
    image: grafana/promtail:2.6.1
    hostname: promtail
    container_name: promtail
    userns_mode: "host"
    profiles:
      - promtail
      - full
      - infra
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/log/journal/:/var/log/journal/:ro
      - /run/log/journal/:/run/log/journal/:ro
      - /etc/machine-id:/etc/machine-id:ro
    command: -config.file=/etc/promtail/promtail_config.yaml
    # deploy: # Change after testing
    #   resources:
    #     limits:
    #       memory: 35M
    #       cpus: '0.2'
    #     reservations:
    #       memory: 25M
    #       cpus: '0.1'
    configs:
      - source: promtail_config
        target: /etc/promtail/promtail_config.yaml
    depends_on:
      - haproxy
    <<: [*default-svc, *log-driver, *default-lables]

  promtail-kafka:
    image: grafana/promtail:2.6.1
    hostname: promtail-kafka
    container_name: promtail-kafka
    profiles:
      - promtail
      - full
      - infra
    command: -config.file=/etc/promtail/promtail_config.yaml
    # deploy: # Change after testing
    #   resources:
    #     limits:
    #       memory: 35M
    #       cpus: '0.2'
    #     reservations:
    #       memory: 25M
    #       cpus: '0.1'
    configs:
      - source: promtail_config_kafka
        target: /etc/promtail/promtail_config.yaml
    depends_on:
      - haproxy
    <<: [*default-svc, *log-driver, *default-lables]

  grafana:
    image: grafana/grafana:9.0.4
    hostname: grafana
    container_name: grafana
    profiles:
      - grafana
      - full
      - infra
    environment:
      GF_SERVER_DOMAIN: ${GRAFANA_DOMAIN:-127.0.0.1}
      GF_SERVER_ROOT_URL: "/grafana"
      GF_SERVER_SERVE_FROM_SUB_PATH: true
      GF_SECURITY_ADMIN_USER: ${GRAFANA_DEFAULT_ADMIN:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_DEFAULT_ADMIN_PASSWORD}
      GRAFANA_DATASOURCE_USER: ${GRAFANA_DATASOURCE_USER:-grafana}
      GRAFANA_DATASOURCE_PASSWORD: ${GRAFANA_DATASOURCE_PASSWORD}
    volumes:
      - grafana:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    # deploy: # Change after testing
    #   resources:
    #     limits:
    #       memory: 50M
    #       cpus: '0.5'
    #     reservations:
    #       memory: 30M
    #       cpus: '0.25'
    configs:
      - source: datasource-auth
        target: /etc/grafana/provisioning/datasources/monitoring.yaml
    depends_on:
      - haproxy
    <<: [*default-svc, *log-driver, *default-lables]

  prometheus:
    image: prom/prometheus:v2.37.0
    hostname: prometheus
    container_name: prometheus
    environment:
      - PROMETHEUS_DATASOURCE_PASSWORD=${GRAFANA_DATASOURCE_PASSWORD}
    command:
    - '--web.external-url=https://${PROMETHEUS_DOMAIN:-127.0.0.1}/prometheus/'
    - '--web.route-prefix=/'
    - '--web.config.file=/etc/prometheus/web.yml'
    - '--config.file=/etc/prometheus/prometheus.yml'
    profiles:
      - prometheus
      - full
      - infra
    volumes:
      - prometheus_data:/prometheus
    configs:
      - source: prometheus
        target: /etc/prometheus/prometheus.yml
      - source: prometheus-alerts
        target: /etc/prometheus/alert.rules
      - source: prometheus-auth
        target: /etc/prometheus/web.yml
    depends_on:
      - haproxy
    <<: [*default-svc, *log-driver, *default-lables]

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.44.0
    hostname: cadvisor
    container_name: cadvisor
    userns_mode: "host"
    profiles:
      - monitoring
      - full
      - infra
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/kmsg:/dev/kmsg:ro
    <<: [*default-svc, *log-driver, *default-lables]

  node-exporter:
    image: prom/node-exporter:v1.3.1
    hostname: node-exporter
    container_name: node-exporter
    profiles:
      - monitoring
      - full
      - infra
    command:
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|run)($$|/)'
    <<: [*default-svc, *log-driver, *default-lables]

  alertmanager:
    image: prom/alertmanager:v0.24.0
    hostname: alertmanager
    container_name: alertmanager
    environment:
      TELEGRAM_BOT_TOKEN: ${ALERTMANAGER_TELEGRAM_BOT_TOKEN}
      TELEGRAM_CHAT_ID: ${ALERTMANAGER_TELEGRAM_CHAT_ID}
    profiles:
      - prometheus
      - full
      - infra
    command:
      - '--config.file=/etc/alertmanager/config.yml'
    configs:
      - source: alertmanager
        target: /etc/alertmanager/config.yml
    <<: [*default-svc, *log-driver, *default-lables]

  kafka-exporter:
    image: danielqsj/kafka-exporter:v1.4.2
    hostname: kafka-exporter
    container_name: kafka-exporter
    command: --kafka.server=kafka1:9092 --kafka.server=kafka2:9092 --kafka.server=kafka3:9092
    profiles:
      - monitoring
      - full
      - infra
    depends_on:
      kafka1:
        condition: service_healthy
    <<: [*default-svc, *log-driver, *default-lables]

  haproxy-exporter:
    image: prom/haproxy-exporter:v0.13.0
    hostname: haproxy-exporter
    container_name: haproxy-exporter
    command: --haproxy.scrape-uri="http://haproxy:8050/stats?stats;csv"
    profiles:
      - monitoring
      - full
      - infra
    depends_on:
      - haproxy
    <<: [*default-svc, *log-driver, *default-lables]

  haproxy:
    image: haproxy:2.6.2-alpine
    hostname: haproxy
    container_name: haproxy
    profiles:
      - haproxy
      - full
      - infra
    ports:
      - 8080:80
      - 25000:9999
      - 25001:9998
      - 25002:9997
      - 25003:9996
    configs:
      - source: haproxy
        target: /usr/local/etc/haproxy/haproxy.cfg
    <<: [*default-svc, *log-driver, *default-lables]

configs:
  loki_config:
    file: ./loki/loki-config-scalable.yaml
  promtail_config:
    file: ./promtail/promtail-config-scalable.yaml
  promtail_config_kafka:
    file: ./promtail/promtail-kafka-config.yaml
  datasource-auth:
    file: ./grafana/datasource-auth.yaml
  alertmanager:
    file: ./prometheus/alertmanager-config.yml
  prometheus:
    file: ./prometheus/prometheus.yml
  prometheus-alerts:
    file: ./prometheus/alert.rules
  haproxy:
    file: ./haproxy/haproxy.cfg
  prometheus-auth:
    file: ./prometheus/web.yml
  kafka_run:
    file: ./kafka/update_run_cluster.sh
  kafka_exporter_jar:
    file: ./kafka/jmx_prometheus_javaagent-0.17.0.jar
  kafka_exporter_config:
    file: ./kafka/jmx-exporter-config.yml
  schema_registry_exporter_config:
    file: ./kafka/jmx-sr-exporter-config.yml
  loki_alert:
    file: ./loki/loki-rules.yml

volumes:
  grafana:
  prometheus_data:
  kafka1-data:
  kafka2-data:
  kafka3-data:
  minio:

networks:
  stage-net:
    name: stage-net
