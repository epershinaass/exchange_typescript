version: "3.8"

x-app: &default-svc
  restart: always
  networks:
    - stage-net
x-log: &log-driver
  logging:
    options:
      tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
x-labels: &default-lables
  labels:
    org.label-schema.group: "monitoring"

services:
  mongo:
    image: mongo:5.0.9
    hostname: mongo
    container_name: mongo

    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGODB_EXPORTER_PASSWORD: ${MONGO_MONGODB_EXPORTER_PASSWORD}
      SERVICE_PASSWORD: ${MONGO_SERVICE_PASSWORD}
      SERVICE_USER: balance
      SERVICE_DB: balance

    volumes:
      - db-data:/data/db
    configs:
      - source: mongo_config
        target: /docker-entrypoint-initdb.d/mongo-init.sh

    profiles:
      - mongo
      - full
      - haproxy
    healthcheck:
      test: echo "db.stats().ok" | mongo mongo:27017/test --quiet # mongo --eval 'db.getCollectionnames()'
      interval: 10s
      timeout: 2s
      retries: 10
    <<: [*default-svc, *log-driver, *default-lables]

  zoo1:
    image: confluentinc/cp-zookeeper:7.2.1
    hostname: zoo1
    container_name: zoo1
    profiles:
      - kafka
      - kafkafull
      - full
      - monitoring
    healthcheck:
      test: echo srvr | nc zoo1 2181 || exit 1
      retries: 20
      interval: 10s
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zoo1-data:/var/lib/zookeeper/data
    <<: [*default-svc, *log-driver, *default-lables]
    # deploy: # Change after testing
    #   resources:
    #     limits:
    #       memory: 1024M


  kafka1:
    image: confluentinc/cp-kafka:7.2.1
    hostname: kafka1
    container_name: kafka1
    profiles:
      - kafka
      - kafkafull
      - full
      - monitoring
    depends_on:
      zoo1:
        condition: service_healthy
    healthcheck:
      test: kafka-topics --bootstrap-server kafka1:9092 --list
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      # KAFKA_BROKER_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_ZOOKEEPER_CONNECT: zoo1:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_SCHEMA_REGISTRY_URL: schema-registry:8081
    <<: [*default-svc, *log-driver, *default-lables]
    volumes:
      - kafka1-data:/var/lib/kafka/data
    # deploy: # Change after testing
    #   resources:
    #     limits:
    #       memory: 4096M

  schema-registry:
    image: confluentinc/cp-schema-registry:7.2.1
    hostname: schema-registry
    container_name: schema-registry
    profiles:
      - kafkafull
      - full
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry # https://docs.confluent.io/platform/current/schema-registry/installation/config.html#host-name
      # SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081" # Default
    healthcheck:
      test: curl --output /dev/null --silent --head --fail http://schema-registry:8081/subjects
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      zoo1:
        condition: service_healthy
      kafka1:
        condition: service_healthy
    <<: [*default-svc, *log-driver, *default-lables]

  loki:
    image: grafana/loki:2.6.1
    hostname: loki
    container_name: loki
    profiles:
      - logs
      - full
      - haproxy
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - loki-data:/loki
    # deploy: # Change after testing
    #   resources:
    #     limits:
    #       memory: 256M
    #       cpus: '0.5'
    #     reservations:
    #       memory: 128M
    #       cpus: '0.1'
    configs:
      - source: loki_config
        target: /etc/loki/loki-config.yaml
    <<: [*default-svc, *log-driver, *default-lables]

  promtail:
    image: grafana/promtail:2.6.1
    hostname: promtail
    container_name: promtail
    profiles:
      - logs
      - haproxy
      - full
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/promtail_config.yaml
    # deploy: # Change after testing
    #   resources:
    #     limits:
    #       memory: 35M
    #       cpus: '0.2'
    #     reservations:
    #       memory: 25M
    #       cpus: '0.1'
    configs:
      - source: promtail_config
        target: /etc/promtail/promtail_config.yaml
    <<: [*default-svc, *log-driver, *default-lables]

  grafana:
    image: grafana/grafana:9.0.4
    hostname: grafana
    container_name: grafana
    profiles:
      - logs
      - full
      - monitoring
      - haproxy
    environment:
      GF_SERVER_DOMAIN: ${GRAFANA_DOMAIN:-127.0.0.1}
      GF_SERVER_ROOT_URL: "/grafana"
      GF_SERVER_SERVE_FROM_SUB_PATH: true
      GF_SECURITY_ADMIN_USER: ${GRAFANA_DEFAULT_ADMIN:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_DEFAULT_ADMIN_PASSWORD}
      GRAFANA_DATASOURCE_USER: ${GRAFANA_DATASOURCE_USER:-grafana}
      GRAFANA_DATASOURCE_PASSWORD: ${GRAFANA_DATASOURCE_PASSWORD}
    volumes:
      - grafana:/var/lib/grafana
      - ./dashboards:/etc/grafana/provisioning/dashboards:ro
    # deploy: # Change after testing
    #   resources:
    #     limits:
    #       memory: 50M
    #       cpus: '0.5'
    #     reservations:
    #       memory: 30M
    #       cpus: '0.25'
    configs:
      - source: datasource-auth
        target: /etc/grafana/provisioning/datasources/monitoring.yaml
    <<: [*default-svc, *log-driver, *default-lables]

  prometheus:
    image: prom/prometheus:v2.37.0
    hostname: prometheus
    container_name: prometheus
    command:
    - '--web.external-url=https://${PROMETHEUS_DOMAIN:-127.0.0.1}/prometheus/'
    - '--web.route-prefix=/'
    - '--web.config.file=/etc/prometheus/web.yml'
    - '--config.file=/etc/prometheus/prometheus.yml'
    profiles:
      - monitoring
      - full
      - haproxy
    volumes:
      - prometheus_data:/prometheus
    configs:
      - source: prometheus
        target: /etc/prometheus/prometheus.yml
      - source: prometheus-alerts
        target: /etc/prometheus/alert.rules
      - source: prometheus-auth
        target: /etc/prometheus/web.yml
    <<: [*default-svc, *log-driver, *default-lables]

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.44.0
    hostname: cadvisor
    container_name: cadvisor
    profiles:
      - monitoring
      - full
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    <<: [*default-svc, *log-driver, *default-lables]

  node-exporter:
    image: prom/node-exporter:v1.3.1
    hostname: node-exporter
    container_name: node-exporter
    profiles:
      - monitoring
      - full
    command:
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|run)($$|/)'
    <<: [*default-svc, *log-driver, *default-lables]

  alertmanager:
    image: prom/alertmanager:v0.24.0
    hostname: alertmanager
    container_name: alertmanager
    environment:
      TELEGRAM_BOT_TOKEN: ${ALERTMANAGER_TELEGRAM_BOT_TOKEN}
      TELEGRAM_CHAT_ID: ${ALERTMANAGER_TELEGRAM_CHAT_ID}
    profiles:
      - monitoring
      - full
    command:
      - '--config.file=/etc/alertmanager/config.yml'
    configs:
      - source: alertmanager
        target: /etc/alertmanager/config.yml
    <<: [*default-svc, *log-driver, *default-lables]

  zookeeper-exporter:
    image: dabealu/zookeeper-exporter:v0.1.12
    hostname: zookeeper-exporter
    container_name: zookeeper-exporter
    profiles:
      - monitoring
      - full
    command: --zk-hosts="zoo1:2181" --timeout=5
    depends_on:
      zoo1:
        condition: service_healthy
    <<: [*default-svc, *log-driver, *default-lables]

  kafka-exporter:
    image: danielqsj/kafka-exporter:v1.4.2
    hostname: kafka-exporter
    container_name: kafka-exporter
    command: --kafka.server=kafka1:9092
    profiles:
      - monitoring
      - full
    depends_on:
      kafka1:
        condition: service_healthy
    <<: [*default-svc, *log-driver, *default-lables]

  haproxy-exporter:
    image: prom/haproxy-exporter:v0.13.0
    hostname: haproxy-exporter
    container_name: haproxy-exporter
    command: --haproxy.scrape-uri="http://haproxy:8050/stats?stats;csv"
    profiles:
      - monitoring
      - haproxy
      - full
    depends_on:
      - haproxy
    <<: [*default-svc, *log-driver, *default-lables]

  haproxy:
    image: haproxy:2.6.2-alpine
    hostname: haproxy
    container_name: haproxy
    profiles:
      - haproxy
      - full
    ports:
      - 8080:80
    configs:
      - source: haproxy
        target: /usr/local/etc/haproxy/haproxy.cfg
    <<: [*default-svc, *log-driver, *default-lables]

  mongodb-exporter:
    image: percona/mongodb_exporter:0.30
    hostname: mongodb-exporter
    container_name: mongodb-exporter
    command:
    - '--mongodb.uri=mongodb://mongodb_exporter:${MONGO_MONGODB_EXPORTER_PASSWORD}@mongo:27017'
    profiles:
      - monitoring
      - haproxy
      - full
    depends_on:
      - mongo
    <<: [*default-svc, *log-driver, *default-lables]


configs:
  loki_config:
    file: ./loki-config.yaml
  promtail_config:
    file: ./promtail-config.yaml
  datasource:
    file: ./datasource.yaml
  datasource-auth:
    file: ./datasource-auth.yaml
  prometheus:
    file: ./prometheus.yml
  alertmanager:
    file: ./alertmanager-config.yml
  prometheus-alerts:
    file: ./alert.rules
  mongo_config:
    file: ./mongodb/mongo-init.sh
  haproxy:
    file: ./haproxy.cfg
  prometheus-auth:
    file: ./web.yml

volumes:
  grafana:
  db-data:
  prometheus_data:
  loki-data:
  kafka1-data:
  zoo1-data:

networks:
  stage-net:
    name: stage-net
